//* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= *//
//* FUNCTIONS                                                        *//
//* path: utilities/_functions.scss                                 *//
//*                                                                *//
//* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= *//


// --------------------------------------------------------------- //
// ФУНКЦИЯ ЗАМЕНЫ СИМВОЛОВ
// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
// --------------------------------------------------------------- //
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// --------------------------------------------------------------- //
// ENCODES A SVG DATA URL SO IE DOESN'T CHOKE
// (via codepen.io/jakob-e/pen/YXXBrp).
// @param {string} $svg SVG data URL.
// @return {string} Encoded SVG data URL.
// use --------------------------------------------- @str-replace //
@function svg-url($svg) {
  $svg: str-replace($svg, '"', '\'');
  $svg: str-replace($svg, '%', '%25');
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '&', '%26');
  $svg: str-replace($svg, '#', '%23');
  $svg: str-replace($svg, '{', '%7B');
  $svg: str-replace($svg, '}', '%7D');
  $svg: str-replace($svg, ';', '%3B');
  @return url("data:image/svg+xml;charset=utf8,#{$svg}");
}
// --------------------------------------------------------------- //
// ПРЕВРАЩЕНИЕ В ЧИСЛА
// use ----------------------------------------------- @str-length //
@function el-numbers($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  @return if($minus, -$result, $result);
}

// --------------------------------------------------------------- //
// HELPER FOR MAP GOOGLEFONTS
// how use: @include import-google-font-family($open-sans);
// $font-family: google-font-family($open-sans);
// use ---------------------------------------------- @str-replace //

@function font-subset(){
  $subset-cyrillic: '';
  $subset-cyrillic-ext: '';
  $subset-latin-ext: '';
  @if $google-subset-cyrillic {
    $subset-cyrillic: '&subset=cyrillic';
  }
  @if $google-subset-cyrillic-ext {
    @if $google-subset-cyrillic {
      $subset-cyrillic-ext: ',cyrillic-ext';
    }
    @else{
      $subset-cyrillic-ext: '&subset=cyrillic-ext';
    }
  }
  @if $google-subset-latin-ext {
    @if $google-subset-cyrillic {
      $subset-latin-ext: ',latin-ext';
    }
    @else{
      @if $google-subset-cyrillic-ext {
        $subset-latin-ext: ',latin-ext';
      }
      @else{
        $subset-latin-ext: '&subset=latin-ext';
      }
    }
  }
  @return unquote($subset-cyrillic + $subset-cyrillic-ext + $subset-latin-ext);
}

@function function-import-google-font-family($import-ff) {
  $google-url: 'https://fonts.googleapis.com/css?family=';
  $google-font-subset: font-subset();
  @return unquote(unquote($google-url) + str-replace(map-get($import-ff, ff1), ' ', '+') + ':' + map-get($import-ff, ffstyle) + '' + unquote($google-font-subset));
}

@function google-font-family($google-ff){
  @return unquote('"' + map-get($google-ff, ff1) + '"' + ',' + map-get($google-ff, ff2));
}
@mixin import-google-font-family($import-ff) {
  @import url('#{function-import-google-font-family($import-ff)}');
}

// --------------------------------------------------------------- //
// HELPER FUNCTION FOR [@mixin aspect-ratio]
// Return null rather than throwing an error if index is outside list
// range.
// --------------------------------------------------------------- //
@function nth-or-null($list, $index) {
  @return if(length($list) >= $index, nth($list, $index), null);
}

// --------------------------------------------------------------- //
// REMOVES A SPECIFIC ITEM FROM A LIST.
// @author Hugo Giraudel
// @param {list} $list List.
// @param {integer} $index Index.
// @return {list} Updated list.
// --------------------------------------------------------------- //
@function remove-nth($list, $index) {
  $result: null;
  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }
  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }
  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }
  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);
    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }
  @return $result;
}

// --------------------------------------------------------------- //
// GETS A VALUE FROM A MAP
// @author Hugo Giraudel
// @param {map} $map Map.
// @param {string} $keys Key(s).
// @return {string} Value.
// use ---------------------------------------------- @remove-nth //
@function val($map, $keys...) {
  @if nth($keys, 1) == null {
    $keys: remove-nth($keys, 1);
  }
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// ------------------------ [Материальный дизайн. 5 "глубин" теней] //
// COMPUTES A BOTTOM-SHADOW AND A TOP-SHADOW FOR A CARD EFFECT
// Helper for mixin [Материальный дизайн. 5 "глубин" теней]
// @param {Number} $depth - depth level
// @return {List}
// --------------------------------------------------------------- //
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));
  @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));
  @return 0 $primary-offset $blur $color;
}

// --------------------------------------------------------------- //
// ASSET url BUILDER
// @param {String} $type - Asset type, matching folder name
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the asset
// --------------------------------------------------------------- //
@function asset($asset-base-path: '../assets',  $type, $file) {
  @return url($asset-base-path + '/' + $type + '/' + $file);
}

// --------------------------------------------------------------- //
// IMAGE ASSET HELPER
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the image
// @require {function} asset
// use ---------------------------------------------------- @asset //
@function image($file) {
  @return asset('img', $file);
}

// --------------------------------------------------------------- //
// FONT ASSET HELPER
// @access public
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the font
// @require {function} asset
// use ---------------------------------------------------- @asset //
@function font($file) {
  @return asset('fonts', $file);
}

// ---------------------------------------------------------------- //
// ИСПОЛЬЗОВАНИЕ EM/REM ВМЕСТО PX
// how use: font-size: rem(14)
// ---------------------------------------------------------------- //

$browser-context: 16;
$font-size-context: $browser-context;

@function rem( $pixels, $context: $font-size-context ) {
  @return calc(($pixels/$context)*1rem);
}

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}

// ---------------------------------------------------------------- //
// ДЛЯ РАБОТЫ С MAP
// Fetch nested keys
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to fetch
// @return {*}
// how use:
//       $grid-configuration: (
//         'columns': 12,
//         'layouts': (
//           'small': 800px,
//           'medium': 1000px,
//           'large': 1200px,
//         ),
//       );
//     $medium: map-deep-get($grid-configuration, 'layouts', 'medium');
// ---------------------------------------------------------------- //
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// --------------------------------------------------------------- //
// UPDATE A KEY DEEPLY NESTED
// @author Hugo Giraudel
// @param {Map} $map - Map to update
// @param {Arglist} $keys - Keys to access to value to update
// @param {*} $value - New value (last member of `$keys`)
// @return {Map} - Updated map
// how use:
//    $medium: map-deep-set($grid-configuration, 'layouts', 'medium', 1300px);
// --------------------------------------------------------------- //
@function map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;
  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }
  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }
  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }
  @return $result;
}

// --------------------------------------------------------------- //
// COMPUTE THE MAXIMUM DEPTH OF A MAP
// @param {Map} $map
// @return {Number} max depth of `$map`
// how use:
//         $depth: map-depth($grid-configuration);
//         -> 2
// --------------------------------------------------------------- //
@function map-depth($map) {
  $level: 1;
  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(map-depth($value) + 1, $level);
    }
  }
  @return $level;
}

// --------------------------------------------------------------- //
// TEST IF MAP GOT ALL `$KEYS` AT FIRST LEVEL
// @author Hugo Giraudel
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to test
// @return {Bool}
// how use:
//     $depth: map-has-keys($grid-configuration, 'columns', 'layouts');
//     -> true
//     $depth: map-has-keys($grid-configuration, 'columns', 'options');
//     -> false
// --------------------------------------------------------------- //
@function map-has-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
  }
  @return true;
}

// --------------------------------------------------------------- //
// TEST IF MAP GOT ALL `$KEYS` NESTED WITH EACH OTHERS
// @author Hugo Giraudel
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to test
// @return {Bool}
// --------------------------------------------------------------- //
@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}

// --------------------------------------------------------------- //
// MAP TO LIST
// how use:
//         $breakpoints: (
//           'small': 600px,
//           'medium': 900px,
//           'large': 1200px
//         );
//         $breakpoints-list: to-list($breakpoints, 'both');
//         -> ('small' 600px, 'medium' 900px, 'large' 1200px)
//         $breakpoints-keys: to-list($breakpoints, 'keys');
//         -> ('small' 'medium' 'large')
//         $breakpoints-values: to-list($breakpoints, 'values');
//         -> (600px 900px 1200px)
// --------------------------------------------------------------- //
@function to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');
  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();
    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }
    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }
  @return if(type-of($value) != 'list', ($value,), $value);
}

// --------------------------------------------------------------- //
// COMPUTE THE MAXIMUM DEPTH OF A MAP
// @param {Map} $map
// @return {Number} max depth of `$map`
// --------------------------------------------------------------- //
@function depth($map) {
  $level: 1;
  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(depth($value) + 1, $level);
    }
  }
  @return $level;
}


//                                                                     //
// ---------------------- BOOTSTRAP FUNCTION v4.6.1 ------------------ //
//                                                                     //

// See https://codepen.io/kevinweber/pen/dXWoRw
//
// Requires the use of quotes around data URIs.

@function escape-svg($string) {
  @if str-index($string, "data:image/svg+xml") {
    @each $char, $encoded in $escaped-characters {
      // Do not escape the url brackets
      @if str-index($string, "url(") == 1 {
        $string: url("#{str-replace(str-slice($string, 6, -3), $char, $encoded)}");
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) * .001;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}

// Retrieve color Sass maps
@function color($key: "blue") {
  @return map-get($colors, $key);
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

@function gray($key: "100") {
  @return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

// Return valid calc
@function add($value1, $value2, $return-calc: true) {
  @if $value1 == null {
    @return $value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 + $value2;
  }

  @return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @if type-of($value2) != number {
    $value2: unquote("(") + $value2 + unquote(")");
  }

  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);
  $divisor-unit: unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}
