//* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ *//
//* MIXINS GRID                                                              *//
//* path: utilities/mixins/_grid.scss                                        *//
//*                                                                          *//
//* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ *//

// Grid system
// --------------------------------------------------
// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Starts at zero
// Used to ensure the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map, $map-name: "$grid-breakpoints") {
  @if length($map) > 0 {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
      @warn "First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.";
    }
  }
}

// ------------------------------------------------------------------- Mixins //
@mixin make-grid-columns($i: 1, $j: #{0}-5, $list: ".col-xs-#{$j}, .col-sm-#{$j}, .col-md-#{$j}, .col-lg-#{$j}") {
  @for $i from (0 + 1) through $grid-columns {
    @if $i == $grid-columns{
      $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }
    @else{
      $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, .col-xs-#{$i}#{-5}, .col-sm-#{$i}#{-5}, .col-md-#{$i}#{-5}, .col-lg-#{$i}#{-5}";
    }
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-right: floor(calc($grid-gutter-width / 2));
    padding-left: ceil(calc($grid-gutter-width / 2));
  }
}

// ------------------------------------------------------------------- Mixins //
@mixin float-grid-columns($class, $i: 1, $j: #{0}-5, $list: ".col-#{$class}-#{$j}") {
  @for $i from (0 + 1) through $grid-columns {
    @if $i == $grid-columns{
      $list: "#{$list}, .col-#{$class}-#{$i}";
    }
    @else{
      $list: "#{$list}, .col-#{$class}-#{$i}, .col-#{$class}-#{$i}#{-5}";
    }
  }
  #{$list} {
    float: left;
  }
}

// ------------------------------------------------------------------- Mixins //
@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index >= 0) {
    @if $index == $grid-columns{
      .col-#{$class}-#{$index} {
        width: percentage(calc($index / $grid-columns));
      }
    }
    @else if $index == 0{
      .col-#{$class}-#{$index}-#{5} {
        width: percentage(calc($index / $grid-columns + ( ( ($index + 1) / $grid-columns - $index / $grid-columns) / 2) ) );
      }
    }
    @else{
      .col-#{$class}-#{$index} {
        width: percentage(calc($index / $grid-columns));
      }
      .col-#{$class}-#{$index}-#{5} {
        width: percentage(calc($index / $grid-columns + ( ( ($index + 1) / $grid-columns - $index / $grid-columns) / 2) ) );
      }
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(calc($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(calc($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(calc($index / $grid-columns));
    }
  }
}

// ------------------------------------------------------------------- Mixins //
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// ------------------------------------------------------------------- Mixins //
// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}
