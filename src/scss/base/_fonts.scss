@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use './../utilities/variables/var-fonts' as *;
@use './../utilities/variables/var-paths' as *;

@each $fontFamily, $fontStyle in $fontsList {
  $fontStyles: map.keys(map.get($fontsList, $fontFamily));
  $fontStylesLength: list.length($fontStyles);
  @for $j from 1 through $fontStylesLength {
    $fontStyleName: list.nth($fontStyles, $j);
    $fontWeights: map.keys(map.get($fontsList, $fontFamily, $fontStyleName));
    $fontNames: map.values(map.get($fontsList, $fontFamily, $fontStyleName));
    $length: list.length($fontWeights);
    @for $i from 1 through $length {
        $weight: list.nth($fontWeights, $i);
        $name: list.nth($fontNames, $i);
        @font-face {
          font-family: $fontFamily;
          font-style: string.unquote($fontStyleName);
          font-weight: $weight;
          src: url('#{$name}.eot');
          src: local('#{$fontFamily}'), local('#{$fontFamily}-#{$weight}'),
          url('#{$path-fonts}#{$name}.woff2') format('woff2'),
          url('#{$path-fonts}#{$name}.woff') format('woff'),
          url('#{$path-fonts}#{$name}.ttf') format('truetype'),
          url('#{$path-fonts}#{$name}.svg##{$fontFamily}') format('svg');
        }
    }
  }
}

@font-face {
  font-family: 'Glyphicons Regular';
  src: url('#{$path-fonts}glyphicons-regular.eot');
  src: url('#{$path-fonts}glyphicons-regular.eot?#iefix') format('embedded-opentype'),
       url('#{$path-fonts}glyphicons-regular.woff2') format('woff2'),
       url('#{$path-fonts}glyphicons-regular.woff') format('woff'),
       url('#{$path-fonts}glyphicons-regular.ttf') format('truetype'),
       url('#{$path-fonts}glyphicons-regular.svg#glyphiconsregular') format('svg');
}
