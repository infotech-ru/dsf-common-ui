@use "sass:math";
// Framework grid generation

@mixin makeGutters($gutters: $grid-gutter-widths) {
  @if $grid-gutter-width-base-equal {
    $gutter: $grid-gutter-width-base;
    padding-right: ($gutter * .5);
    padding-left:  ($gutter * .5);
  } @else {
    @each $breakpoint in map-keys($gutters) {
      @include media-breakpoint-up($breakpoint) {
        $gutter: map-get($gutters, $breakpoint);
        padding-right: ($gutter * .5);
        padding-left:  ($gutter * .5);
      }
    }
  }
}

@mixin makeCol($size, $columns: $grid-columns) {
  @if $enable-grid-flex {
    flex: 0 0 percentage(calc($size / $columns));
    max-width: percentage(calc($size / $columns));
  } @else {
    float: left;
    width: percentage(calc($size / $columns));
  }
}

@mixin makeCol5($size, $columns: $grid-columns) {
  @if $enable-grid-flex {
    flex: 0 0 percentage(calc($size / $columns + 1 / $columns * .5));
    max-width: percentage(calc($size / $columns + 1 / $columns * .5));
  } @else {
    float: left;
    width: percentage(calc($size / $columns + 1 / $columns * .5));
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  @if $enable-col-offset-classes {
    margin-left: percentage(calc($size / $columns));
  }
}
@mixin make-col-offset5($size, $columns: $grid-columns) {
  @if $enable-col-offset-classes {
    margin-left: percentage(calc($size / $columns + 1 / $columns * .5));
  }
}

@mixin makeGridColumns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  %gridColumn {
    position: relative;
    min-height: 1px;
    @if $enable-grid-flex {
      width: 100%;
    }
    @include makeGutters($gutters);
  }

  $breakpoint-counter: 0;
  @each $breakpoint in map-keys($breakpoints) {


    $breakpoint-counter: ($breakpoint-counter + 1);

    // Allow columns to stretch full width below their breakpoints
    .col-#{$breakpoint} {
      @extend %gridColumn;
    }

    .col-#{$breakpoint}-0-5 {
      @extend %gridColumn;
    }

    @for $i from 1 through $columns {
      @if $i == $columns {
        .col-#{$breakpoint}-#{$i}{
          @extend %gridColumn;
        }
      }
      @else {
        .col-#{$breakpoint}-#{$i},
        .col-#{$breakpoint}-#{$i}-5 {
          @extend %gridColumn;
        }
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $enable-grid-flex {
        .col-#{$breakpoint} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
      }
      .col-#{$breakpoint}-0-5 {
        @include makeCol5(0);
      }
      @for $i from 1 through $columns {
        @if $i == $columns {
          .col-#{$breakpoint}-#{$i} {
            @include makeCol($i, $columns);
          }
        }
        @else{
          .col-#{$breakpoint}-#{$i} {
            @include makeCol($i, $columns);
          }
          .col-#{$breakpoint}-#{$i}-5 {
            @include makeCol5($i, $columns);
          }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible

      @for $i from 0 through ($columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
          @if $i == $columns {
            .offset-#{$breakpoint}-#{$i} {
              @include make-col-offset($i, $columns)
            }
          }
          @else{
            .offset-#{$breakpoint}-#{$i} {
              @include make-col-offset($i, $columns)
            }
            .offset-#{$breakpoint}-#{$i}-5 {
              @include make-col-offset5($i, $columns)
            }
          }
        }
      }
    }
  }
}

@mixin makeContainer($gutter: $grid-gutter-width-base) {
  margin-left: auto;
  margin-right: auto;
  @if $grid-gutter-width-base-equal {
    padding-right: ((map-get($grid-gutter-widths, 'xs')) * .5);
    padding-left: ((map-get($grid-gutter-widths, 'xs')) * .5);
  }
  @else{
    padding-right: ($grid-gutter-width * .5);
    padding-left: ($grid-gutter-width * .5);
  }

  @if not $enable-grid-flex {
    @include clearfix();
  }
}

@function breakpointInfix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "#{$name}");
}

@mixin makeContainerGrid($max-widths: $container-max-widths, $gutter: $grid-gutter-widths, $breakpoints: $grid-breakpoints){
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpointInfix($breakpoint, $breakpoints);
    $gutters: map-get($gutter, $infix);
    $widths: map-get($max-widths, $infix);
    @if not $grid-gutter-width-base-equal{
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @if ($gutters == null){
          padding-right: $gutters;
          padding-left: $gutters;
        }
        @else{
          padding-right: $gutters * .5;
          padding-left: $gutters * .5;
        }
        max-width: $widths;
      }
    }
    @else{
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        max-width: $widths;
      }
    }
  }
}

@mixin makeRow($gutters: $gridGutterWidth) {
  @if $enable-grid-flex {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }
  @if not $grid-gutter-width-base-equal { // @todo доработать при необходимости разных значений
    @each $breakpoint in map-keys($gutters) {
      @include media-breakpoint-up($breakpoint) {
        $gutter: map-get($gutters, $breakpoint);
        margin-right: ($gutter * -.5);
        margin-left:  ($gutter * -.5);
      }
    }
  }
  @else{
    margin-right: ($gutters * -.5);
    margin-left:  ($gutters * -.5);
  }
}
