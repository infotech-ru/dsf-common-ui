// ----------------------------------------------------------------- FUNCTION //
// REMOVES A SPECIFIC ITEM FROM A LIST.
// @author Hugo Giraudel
// @param {list} $list List.
// @param {integer} $index Index.
// @return {list} Updated list.
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

@function remove-nth($list, $index) {
  $result: null;
  @if meta.type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }
  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }
  @else if abs($index) > list.length($list) {
    @warn "List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.";
  }
  @else {
    $result: ();
    $index: if($index < 0, list.length($list) + $index + 1, $index);
    @for $i from 1 through list.length($list) {
      @if $i != $index {
        $result: append($result, list.nth($list, $i));
      }
    }
  }
  @return $result;
}

// ----------------------------------------------------------------- FUNCTION //
// GETS A VALUE FROM A MAP
// @author Hugo Giraudel
// @param {map} $map Map.
// @param {string} $keys Key(s).
// @return {string} Value.
//
// DEPENDENCIES: @remove-nth

@function val($map, $keys...) {
  @if list.nth($keys, 1) == null {
    $keys: remove-nth($keys, 1);
  }
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}


// ----------------------------------------------------------------- FUNCTION //
// ДЛЯ РАБОТЫ С MAP
// Fetch nested keys
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to fetch
// @return {*}
// how use:
//       $grid-configuration: (
//         'columns': 12,
//         'layouts': (
//           'small': 800px,
//           'medium': 1000px,
//           'large': 1200px,
//         ),
//       );
//     $medium: map-deep-get($grid-configuration, 'layouts', 'medium');

@function map-deep-get($map, $keys...) {
  @if meta.type-of($map) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{meta.type-of($map)}`. Type of `Map` is required!';
  }
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

// ----------------------------------------------------------------- FUNCTION //
// UPDATE A KEY DEEPLY NESTED
// @author Hugo Giraudel
// @param {Map} $map - Map to update
// @param {Arglist} $keys - Keys to access to value to update
// @param {*} $value - New value (last member of `$keys`)
// @return {Map} - Updated map
// how use:
//    $medium: map-deep-set($grid-configuration, 'layouts', 'medium', 1300px);

@function map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;
  @if list.length($keys) == 2 {
    @return map-merge($map, (list.nth($keys, 1): list.nth($keys, -1)));
  }
  @for $i from 1 through list.length($keys) - 2 {
    $map-list: append($map-list, map.get(list.nth($map-list, -1), list.nth($keys, $i)));
  }
  @for $i from list.length($map-list) through 1 {
    $result: map-merge(list.nth($map-list, $i), (list.nth($keys, $i): if($i == list.length($map-list), list.nth($keys, -1), $result)));
  }
  @return $result;
}

// ----------------------------------------------------------------- FUNCTION //
// COMPUTE THE MAXIMUM DEPTH OF A MAP
// @param {Map} $map
// @return {Number} max depth of `$map`
// how use:
//         $depth: map-depth($grid-configuration);
//         -> 2

@function map-depth($map) {
  $level: 1;
  @each $key, $value in $map {
    @if meta.type-of($value) == "map" {
      $level: max(map-depth($value) + 1, $level);
    }
  }
  @return $level;
}

// ----------------------------------------------------------------- FUNCTION //
// TEST IF MAP GOT ALL `$KEYS` AT FIRST LEVEL
// @author Hugo Giraudel
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to test
// @return {Bool}
// how use:
//     $depth: map-has-keys($grid-configuration, 'columns', 'layouts');
//     -> true
//     $depth: map-has-keys($grid-configuration, 'columns', 'options');
//     -> false

@function map-has-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
  }
  @return true;
}

// ----------------------------------------------------------------- FUNCTION //
// TEST IF MAP GOT ALL `$KEYS` NESTED WITH EACH OTHERS
// @author Hugo Giraudel
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to test
// @return {Bool}

@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map.get($map, $key);
  }
  @return true;
}

// ----------------------------------------------------------------- FUNCTION //
// MAP TO LIST
// how use:
//         $breakpoints: (
//           'small': 600px,
//           'medium': 900px,
//           'large': 1200px
//         );
//         $breakpoints-list: to-list($breakpoints, 'both');
//         -> ('small' 600px, 'medium' 900px, 'large' 1200px)
//         $breakpoints-keys: to-list($breakpoints, 'keys');
//         -> ('small' 'medium' 'large')
//         $breakpoints-values: to-list($breakpoints, 'values');
//         -> (600px 900px 1200px)

@function to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');
  @if meta.type-of($value) == 'map' {
    $keys: ();
    $values: ();
    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }
    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }
  @return if(meta.type-of($value) != 'list', ($value,), $value);
}

// ----------------------------------------------------------------- FUNCTION //
// COMPUTE THE MAXIMUM DEPTH OF A MAP
// @param {Map} $map
// @return {Number} max depth of `$map`

@function depth($map) {
  $level: 1;
  @each $key, $value in $map {
    @if meta.type-of($value) == "map" {
      $level: max(depth($value) + 1, $level);
    }
  }
  @return $level;
}
