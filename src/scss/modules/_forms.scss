/* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ */
/*                                                                            */
/* FORMS ELEMENT                                                              */
/* path: dsf-common-ui/src/scss/modules/_forms.scss                           */
/*                                                                            */
/* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ */

@use "sass:math";

fieldset {
    padding: 0 12px 8px;
    border: 1px solid #C0C0C0;
    border-radius: 3px;
}

legend {
  // border-bottom: 1px solid $legend-border-color;
  border-bottom: 0;
  padding: 0 9px;
  font-size: 14px;
  font-weight: 700;
  margin-bottom: 18px;
  margin-left: 11px;
  width: auto;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: 700;
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
select.input-sm {
    line-height: rem(calc(_lineHeight(btn) + 2));
    height: rem(calc(_lineHeight(btn) + 2));
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}

.control-label{
  $paddinFromLeft: 3;
    // letter-spacing: .5px;
    display: block;
    color: _brand-palette(controlLabel_color);
    font-size: rem(_fontSizes(controlLabel));
    font-weight: _fontWeight(controlLabel);
    line-height: 14px; // возможность добавлять иконку
    margin-bottom: #{_brand-sizes(controlLabel_mb)}px;
    &:after {
      .required & {
        color: _brand-palette(controlLabelError_color);
        content: '*';
        .css-formFree & {
          display: inline-block;
          position: relative;
          top: 0;
        }
      }
    }
    .css-formFree & {
      font-size: rem(_fontSizes(controlLabel__formFree));
      left: 0;
      // left: rem($paddinFromLeft * -1);
      // padding-left: rem(_brand-sizes(formControl_paddingX));
      padding-left: rem(calc(_brand-sizes(formControl_paddingX) - $paddinFromLeft));
      // padding-right: 3px;
      padding-right: rem(calc(_brand-sizes(formControl_paddingX) + 5));
      position: absolute;
      line-height: rem(calc(_lineHeight(input) + 2));
      margin-bottom: 0;
      // transition: color .2s ease-out;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: top .2s ease-out, font-size .2s ease-out;
      transform: translateX(0) translateY(0);
      transform-origin: 0% 100%;
      top: rem(_fontSizes(controlLabel_active__formFree));
      z-index: 0; // Если больше 0 - появляется некликабельный участок
      white-space: nowrap;
    }
    &.active {
      .css-formFree & {
        // background-color: _brand-palette(controlLabelActive_bgc);
        background-color:var(--bg_color, _brand-palette(controlLabelActive_bgc));
        font-size: rem(_fontSizes(controlLabel_active__formFree));
        left: rem($paddinFromLeft * -1);
        line-height: rem(_fontSizes(controlLabel_active__formFree));
        padding-left: rem(calc(_brand-sizes(formControl_paddingX) - $paddinFromLeft));
        padding-right: rem(_brand-sizes(formControl_paddingX));
        transform: translateX(rem(calc(_brand-sizes(formControl_paddingX) - $paddinFromLeft))) translateY(0);
        top: 2px; // корректировка из-за line-height
        z-index: 1;
      }
    }
}

.form-control {
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  // background-color: _brand-palette(formControl-bgc);
  background-color:var(--bg_color, _brand-palette(formControl-bgc));
  border-radius: #{_brand-sizes(borderRadiusFormElem)}px;
  border: 1px solid _brand-palette(formControl-borderColor);
  // @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075));
  box-shadow: none;
  color: _brand-palette(formControl-color);
  display: block;
  height: rem(calc(_lineHeight(input) + 2)); //  + border-top and border-bottom
  font-size: rem(_fontSizes(formElem));
  font-weight: _fontWeight(formElem);
  line-height: rem(_lineHeight(input));
  padding: 0 rem(_brand-sizes(formControl_paddingX));
  width: 100%;
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  // Placeholder
  // @include placeholder;
  @include placeholder2(_brand-palette(formControl-placeholder), 400, 12);
  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
  &:focus{
    border-color: inherit;
    box-shadow: none;
    outline: none;
  }
  &[type=file] {
    border: none;
  }
  
  .css-formFree & {
    &::-moz-placeholder {
      font-size: 0;
    }
    &:-moz-placeholder {
      font-size: 0;
    }
    &:-ms-input-placeholder {
      font-size: 0;
    }
    &::-webkit-input-placeholder {
      font-size: 0;
    }
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
  border-radius: rem(_brand-sizes(borderRadiusFormElem));
  height: auto;
  line-height: rem(calc(_fontSizes(formElem) + 2));
  min-height: rem(calc(_lineHeight(input) + 2));
  padding: 6px rem(_brand-sizes(formControl_paddingX)) 2px;
  resize: vertical;
}

// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 9.3, iOS doesn't support `week`.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    &.form-control {
      line-height: $input-height-base;
    }

  }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  // margin-bottom: $form-group-margin-bottom;
  margin-bottom: rem(_brand-sizes(formGroup_mb));
  .css-formFree &{ 
    margin-bottom: rem(calc(_brand-sizes(formGroup__formFree_mb) - _fontSizes(controlLabel_active__formFree)));
    padding-top: rem(_fontSizes(controlLabel_active__formFree));
    position: relative;
  }
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;

  // These are used on elements with <label> descendants
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $cursor-disabled;
    }
  }

  label {
    min-height: $line-height-computed; // Ensure the input doesn't jump when there is no text
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: 400;
    cursor: pointer;
  }
}

.radio {
  margin-top: 0;
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-top: 4px \9;
  margin-left: -20px;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  font-weight: 400;
  vertical-align: middle;
  cursor: pointer;

  // These are used directly on <label>s
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  color: _brand-palette(formControl-color);
  // min-height: ($line-height-computed + $font-size-base);
  font-size: rem(_fontSizes(formElem));
  font-weight: _fontWeight(formElem);
  min-height: auto;
  // Size it appropriately next to real form controls
  padding-top: ($padding-base-vertical + 1);
  padding-bottom: ($padding-base-vertical + 1);
  // Remove default margin from `p`
  margin-bottom: 0;
  padding-right: 0;
  padding-left: 0;
  &__height{
    height: rem(calc(_lineHeight(input) + 2));
  }
  .css-formFree &{ 
    padding-left: rem(_brand-sizes(formControl_paddingX));
    padding-right: rem(_brand-sizes(formControl_paddingX));
  }
}

// Feedback states
.has-success {
  @include form-control-validation(_brand-palette(hasSuccess_color), _brand-palette(hasSuccess_border), _brand-palette(hasSuccess_bgc));
}
.has-warning {
  @include form-control-validation(_brand-palette(hasWarning_color), _brand-palette(hasWarning_border), _brand-palette(hasWarning_bgc));
}
.has-error {
  @include form-control-validation(_brand-palette(hasDanger_color), _brand-palette(hasDanger_border), _brand-palette(hasDanger_bgc));
}

// Reposition feedback icon if input has visible label above
.has-feedback label {
  & ~ .form-control-feedback {
    top: ($line-height-computed + 5); // Height of the `label` and its margin
  }
  &.sr-only ~ .form-control-feedback {
    top: 0;
  }
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten($text-color, 25%); // lighten the text some for contrast
  &:empty { // style.css
      display: none;
  }
}

// Inline forms

@mixin form-inline {

  // Kick in the inline
  @media (min-width: $screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}
// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
  @include form-inline;
}

// Horizontal forms

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    padding-top: ($padding-base-vertical + 1); // Default padding plus a border
    margin-top: 0;
    margin-bottom: 0;
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: ($line-height-computed + ($padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include make-row;
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: $screen-sm-min) {
    .control-label {
      padding-top: ($padding-base-vertical + 1); // Default padding plus a border
      margin-bottom: 0;
      text-align: right;
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: floor(math.div($grid-gutter-width, 2));
  }
}

.comboTreeInputBox{
  &,
  &.btn-default,
  &.btn {
    background-color: transparent;
    background-image: none;
    border-color: _brand-palette(formControl-borderColor);
    // .css-formFree & {
    // }
  }
}

.redactorBlock{
  display: flex;
  flex-direction: column;
  width: 100%;
  &Container{
    border-radius: #{_brand-sizes(borderRadiusFormElem)}px;
    border: 1px solid _brand-palette(formControl-borderColor);
    display: flex;
    min-height: 36px;
    outline: none;
    padding: 0px;
    position: relative;
    resize: none;
    white-space: pre-wrap;
    word-wrap: break-word;
    &:focus-within{
      border-color: inherit;
    }
  }
  &ActionBlock{
    align-items: center;
    display: inline-flex;
    height: 21px; // равен высоте .redactor-toolbar + отсуп
    position: absolute;
    top: 31px;
    right: rem(_brand-sizes(formControl_paddingX));
    // width: 56px;
    white-space: nowrap;
    input[type="file"]{
      cursor: pointer;
      opacity: 0;
      position: absolute;
      height: 100%;
      top: 0;
      width: 100%;
    }
  }
  &FileListBlock{
    width: 100%;
    padding-left: rem(_brand-sizes(formControl_paddingX));
  }
  &BoxWrapper{
    padding: 5px 77px 0 0;
    padding-left: rem(_brand-sizes(formControl_paddingX));
    min-height: 14px;
    width: 100%;
    word-break: break-word;
    .redactor-toolbar {
      box-shadow: none;
      li a{
        color: _brand-palette(formControl-color);
        font-size: 16px;
        margin-right: 5px;
        padding: 0 3px;
        &:hover{
          background-color: transparent;
          color: inherit;
        }
      }
    }
    .redactor-editor {
      border: none;
      padding: 10px 0 38px;
      div,  p, figure, blockquote, pre{
        line-height: 20px;
        margin-bottom: 0px;
      }
    }
    .redactor-box {
      margin-bottom: 0;
    }
    .redactor-placeholder::after{
      color: _brand-palette(controlLabel_color) !important;
      font-size: rem(_fontSizes(controlLabel__formFree));
      left: 0px;
      top: 10px;
    }
  }
}

.hint-block{
  font-size: 11px;
}