/* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ */
/*                                                                            */
/* GROUP ELEMENTS                                                             */
/* path: dsf-common-ui/src/scss/modules/_elem-group.scss                      */
/*                                                                            */
/* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~ */
@use './../utilities/functions/func_fonts' as *;
@use './../utilities/variables/var-bootstrap-v3' as *;
@use './../utilities/variables/var-lineHeights' as *;
@use './../utilities/variables/var-colors' as *;
@use './../utilities/variables/var-sizes' as *;
@use './../utilities/variables/var-fonts' as *;
@use './../utilities/mixins_bootstrap-v3/border-radius' as *;
@use './../utilities/mixins/transition' as *;
@use './buttons' as *;

//
// Button groups
// --------------------------------------------------


// .btn-group,
// .btn-group-vertical {
.btn-group{
  position: relative;
  // display: inline-block;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above
  // > .btn,
  > [class^="btn"]{
    position: relative;
    // float: left;
    // Bring the "active" button to the front
    &:hover,
    &:focus,
    &:active,
    &.active {
      z-index: 2;
    }
  }
}

// Prevent double borders when buttons are next to each other
.btn-group {
  // .btn + .btn,
  [class^="btn"] + [class^="btn"],
  // .btn + .btn-group,
  [class^="btn"] + .btn-group,
  // .btn-group + .btn,
  .btn-group + [class^="btn"],
  .btn-group + .btn-group {
    margin-left: -1px;
  }
}

// // Optional: Group multiple button groups together for a toolbar
// .btn-toolbar {
//   margin-left: -5px; // Offset the first child's margin
//   @include clearfix;
//
//   // .btn,
//   [class^="btn"],
//   .btn-group,
//   .input-group {
//     float: left;
//   }
//   // > .btn,
//   > [class^="btn"],
//   > .btn-group,
//   > .input-group {
//     margin-left: 5px;
//   }
// }

// .btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
.btn-group > [class^="btn"]:not(:first-child):not(:last-child):not(.dropdown-toggle) {
  border-radius: 0;
}

// Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
// .btn-group > .btn:first-child {
.btn-group > [class^="btn"]:first-child {
  margin-left: 0;
  &:not(:last-child):not(.dropdown-toggle) {
    @include border-right-radius(0);
  }
}
// Need .dropdown-toggle since :last-child doesn't apply, given that a .dropdown-menu is used immediately after it
// .btn-group > .btn:last-child:not(:first-child),
.btn-group > [class^="btn"]:last-child:not(:first-child),
.btn-group > .dropdown-toggle:not(:first-child) {
  @include border-left-radius(0);
}

// Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
// .btn-group > .btn-group {
//   float: left;
// }
// .btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {
//   border-radius: 0;
// }
// .btn-group > .btn-group:first-child:not(:last-child) {
//   > .btn:last-child,
//   > .dropdown-toggle {
//     @include border-right-radius(0);
//   }
// }
// .btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {
//   @include border-left-radius(0);
// }

// On active and open, don't show outline
.btn-group .dropdown-toggle:active,
.btn-group.open .dropdown-toggle {
  outline: 0;
}


// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.

// .btn-group-xs > .btn { @extend .btn-xs; }
// .btn-group-sm > .btn { @extend .btn-sm; }
// .btn-group-lg > .btn { @extend .btn-lg; }

.btn-group > [class^="btn"],
// .btn-group > .btn,
.btn-group-sm > .btn, // старые правила очищаем
.btn-group-lg > .btn {
  // border-radius: #{brandSizes(btn_borderRadius)}px;
  line-height: rem(lineHeight(btn));
}

.btn-group > .btn-xs,
.btn-group > .btn-small {
  line-height: rem(lineHeight(btnXs));
}

.btn-group > .btn-large {
  line-height: rem(lineHeight(btnLg));
}
// Split button dropdowns
// ----------------------

// Give the line between buttons some depth
// .btn-group > .btn + .dropdown-toggle {
.btn-group > [class^="btn"] + .dropdown-toggle {
  padding-right: 8px;
  padding-left: 8px;
}

// .btn-group > .btn-lg + .dropdown-toggle {
//   padding-right: 12px;
//   padding-left: 12px;
// }

// The clickable button for toggling the menu
// Remove the gradient and set the same inset shadow as the :active state
.btn-group.open .dropdown-toggle {
  box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);

// Show no shadow for `.btn-link` since it has no other button styles.

  &.btn-link {
    box-shadow: none;
  }
}


.btn-group__theme{
  // @extend .btn-group;
  & > [class^="btn"] {
    @extend .btn-default;
  }
  & > [class^="btn"].active{
    @extend .btn-primary;
  }
}

.btn-group__opacity{
  & > [class^="btn"] {
    opacity: 0.4;
  }
  & > [class^="btn"]:hover,
  & > [class^="btn"]:focus,
  & > [class^="btn"].active{
    opacity: 1;
  }
}

.btn-group__radioCheck{
  align-items: center;
  background-color: brandColors(_grey2);
  border-color: brandColors(_grey2);
  border-radius: 1px;
  display: inline-flex;
  justify-content: space-between;
  height: 18px;
  padding: 0;
  position: relative;
  width: 40px;
  &Item{
    align-items: center;
    background-color: brandColors(_light-blue);
    background-image: none;
    border: none;
    border-radius: 1px;
    display: inline-flex;
    flex: 0 0 20px;
    font-size: 0; // safari fix
    height: 18px;
    outline: none;
    padding: 2px;
    text-indent: -9999px;
    width: 20px;
    &:after{
      background-color: brandColors(_light-grey);
      box-shadow: 0px 3px 5px rgba(0, 0, 0, 0.5);
      display: none;
      content: '';
      height: 14px;
      width: 16px;
    }
    &:focus, &:hover{ 
      background-image: none;
      background-color: brandColors(_light-blue);
      border: none;
      outline: none;
    }
    &.active{
      background-color: brandColors(_grey2);
      background-image: none;
      &:after{
        display: block;
      }
      &:focus, &:hover{ 
        background-color: brandColors(_grey2);
        background-image: none;
      }
      & + .btn-group__radioCheckItem{
        background-color: brandColors(_grey2);
        &:focus, &:hover{ 
          background-color: brandColors(_grey2);
        }
      }
    }
    & + .active{
      background-color: brandColors(_light-blue);
      width: 100%;
      &:focus, &:hover{ 
        background-color: brandColors(_light-blue);
      }
    }
  }
}

.btn-group__vertical {
    align-items: flex-start;
    flex-direction: column;
    justify-content: center;
//   > .btn-group,
//   > .btn-group > [class^="btn"],
  > [class^="btn"] {
    position: relative;
    flex: 1 1 auto;
    width: 100%;
//     display: block;
//     float: none;
//     max-width: 100%;
    &:first-child:not(:last-child):not(.dropdown-toggle) {
      @include border-top-radius(1px);
      @include border-bottom-radius(0);
    }
    &:last-child:not(:first-child) {
      @include border-top-radius(0);
      @include border-bottom-radius(1px);
    }
    & + [class^="btn"] {
      margin-left: 0;
    }
  }
}

.btn-group__equal{
  flex-wrap: wrap;
  > [class^="btn"] {
    flex: 1 1 0px;
    min-width: fit-content;
    width: 0;
  }
  &.btn-group__vertical {
    > [class^="btn"] {
      width: 100%;
    }
  }
}
.btn-group__alignLeft{ 
    > [class^="btn"] {
      text-align: left;
    }
}

// Justified button groups
// ----------------------
//
// .btn-group-justified {
//   display: table;
//   width: 100%;
//   table-layout: fixed;
//   border-collapse: separate;
//   > .btn,
//   > .btn-group {
//     display: table-cell;
//     float: none;
//     width: 1%;
//   }
//   > .btn-group .btn {
//     width: 100%;
//   }
//
//   > .btn-group .dropdown-menu {
//     left: auto;
//   }
// }


// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

[data-toggle="buttons"] {
  // > .btn,
  > [class^="btn"],
  // > .btn-group > .btn {
  > .btn-group > [class^="btn"] {
    input[type="radio"],
    input[type="checkbox"] {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none;
    }
  }
}

//
// Input groups
// --------------------------------------------------

// Base styles
// -------------------------
.input-group {
  position: relative; // For dropdowns
  display: table;
  border-collapse: separate; // prevent input groups from inheriting border styles from table cells when placed within a table
  width: 100%;
  // Undo padding and float of grid classes
  &[class*="col-"] {
    float: none;
    padding-right: 0;
    padding-left: 0;
  }

  .form-control {
    // Ensure that the input is always above the *appended* addon button for
    // proper border colors.
    position: relative;
    z-index: 2;

    // IE9 fubars the placeholder attribute in text inputs and the arrows on
    // select elements in input groups. To fix it, we float the input. Details:
    // https://github.com/twbs/bootstrap/issues/11561#issuecomment-28936855
    float: left;
    margin-bottom: 0;
    width: 100%;

    &:focus {
      z-index: 3;
    }
  }
}


// Display as table-cell
// -------------------------
.input-group-addon,
.input-group-btn,
.input-group .form-control {
  display: table-cell;

  &:not(:first-child):not(:last-child) {
    border-radius: 0;
  }
}
// Addon and addon wrapper for buttons
.input-group-addon,
.input-group-btn {
  width: 1%;
  white-space: nowrap;
  vertical-align: middle; // Match the inputs
}

// Text input groups
// -------------------------
.input-group-addon {
  padding: rem(brandSizes(inputGroupAddon_paddingY)) rem(brandSizes(inputGroupAddon_paddingX));
  font-size: rem(fontSizes(inputGroupElem));
  font-weight: 400;
  line-height: 1;
  color: brandPalette(inputGroupEl-color);
  text-align: center;
  background-color: brandPalette(inputGroupEl-bgc);
  border: 1px solid brandPalette(inputGroupEl-borderColor);
  border-radius: 0;

  // Nuke default margins from checkboxes and radios to vertically center within.
  input[type="radio"],
  input[type="checkbox"] {
    margin-top: 0;
  }
}

// Reset rounded corners
.input-group .form-control:first-child,
.input-group-addon:first-child,
.input-group-btn:first-child > .btn,
.input-group-btn:first-child > .btn-group > .btn,
.input-group-btn:first-child > .dropdown-toggle,
.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {
  @include border-right-radius(0);
}
.input-group-addon:first-child {
  border-right: 0;
}
.input-group .form-control:last-child,
.input-group-addon:last-child,
.input-group-btn:last-child > .btn,
.input-group-btn:last-child > .btn-group > .btn,
.input-group-btn:last-child > .dropdown-toggle,
.input-group-btn:first-child > .btn:not(:first-child),
.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {
  @include border-left-radius(0);
}
.input-group-addon:last-child {
  border-left: 0;
}

// Button input groups
// -------------------------
.input-group-btn {
  position: relative;
  // Jankily prevent input button groups from wrapping with `white-space` and
  // `font-size` in combination with `inline-block` on buttons.
  font-size: 0;
  white-space: nowrap;

  // Negative margin for spacing, position for bringing hovered/focused/actived
  // element above the siblings.
  > .btn {
    position: relative;
    + .btn {
      margin-left: -1px;
    }
    // Bring the "active" button to the front
    &:hover,
    &:focus,
    &:active {
      z-index: 2;
    }
  }

  // Negative margin to only have a 1px border between the two
  &:first-child {
    > .btn,
    > .btn-group {
      margin-right: -1px;
    }
  }
  &:last-child {
    > .btn,
    > .btn-group {
      z-index: 2;
      margin-left: -1px;
    }
  }
}


.inputGroup {
  align-items: flex-end;
  display: flex;
  flex-wrap: wrap;
  position: relative;
  width: 100%;
  .css-formFree & {
    align-items: stretch;
  }
  .form-group,
  .form-group__10 {
    margin-bottom: 0;
    padding-top: 0;
  }
  >.form-control,
  >.form-control-container,
  >.form-control-plaintext {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    width: 1%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
    margin-bottom: 0;

    +.form-control {
      margin-left: #{calc(brandSizes(btn_borderWidth) * -1)}px;
    }
  }
  >.form-control:focus {
    z-index: 3;
  }
  >.form-control {
    &:not(:first-child) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      border-left-width: 0;
    }
    &:not(:last-child) {
      border-right-width: 0;
    }
  }
  
  &:focus-within{
    .inputGroup_text{
      border-color: brandPalette(formControl-color);
      @include transition(border-color ease-in-out .15s);
      svg {
        --svg-icon-fill: var(--btn_svg__hover);
        --svg-icon-stroke: var(--btn_svg__hover);
      }
    }
    [class^="btn-"]{ 
      border-color: brandPalette(formControl-color);
      background-color: var(--btn_bg__hover);
      background-image: -webkit-linear-gradient(var(--btn_bg__hover) 0%, var(--btn_bg-end__hover) 100%);
      background-image: linear-gradient(var(--btn_bg__hover) 0%, var(--btn_bg-end__hover) 100%);
      @include transition(border-color ease-in-out .15s);
      svg{ 
        --svg-icon-fill: var(--btn_svg__hover);
        --svg-icon-stroke: var(--btn_svg__hover);
      }
    }
  }
}

.form-control-container {
  .css-formFree & {
    padding-top: rem(fontSizes(controlLabel_active__formFree));
  }
  .form-control {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    border-top-right-radius: 0;
    border-left-width: 0;
    border-right-width: 0;
  }
  & + .form-control-container {
    .form-control {
      border-left-width: 1px;
    }
  }
  &:first-child {
    .form-control {
      border-left-width: 1px;
    }
  }
  &:last-child {
    .form-control {
      border-right-width: 1px;
    }
  }
  &__border{ 
      position: relative;
      flex: 1 1 auto;
      width: 1%;
      min-width: 0;
      margin-bottom: 0;
      .form-control{
        border-left-width: 1px;
      }
      .css-formFree &{
          padding-top: rem(fontSizes(controlLabel_active__formFree));
      }
  }
}

.inputGroup_prepend,
.inputGroup_append {
  display: flex;
  .css-formFree & {
    padding-top: rem(fontSizes(controlLabel_active__formFree));
  }
  .btn {
    position: relative;
    z-index: 2;
    &:focus {
      z-index: 3;
    }
  }
  .btn+.btn,
  .btn+.inputGroup_text,
  .inputGroup_text+.inputGroup_text,
  .inputGroup_text+.btn {
    margin-left: #{calc(brandSizes(btn_borderWidth) * -1)}px;
  }
}

.inputGroup_prepend {
  // margin-right: #{calc(brandSizes(btn_borderWidth) * -1)}px;
  margin-right: 0;
  .inputGroup_text {
    border-left: 1px solid brandPalette(inputGroupEl-borderColor);
  }
}

.inputGroup_append {
  // margin-left: #{calc(brandSizes(btn_borderWidth) * -1)}px;
  margin-left: 0;
  .inputGroup_text {
    border-right: 1px solid brandPalette(inputGroupEl-borderColor);
  }
}

.inputGroup_text {
  align-items: center;
  background-color: brandPalette(inputGroupEl-bgc);
  border-bottom: 1px solid brandPalette(inputGroupEl-borderColor);
  border-top: 1px solid brandPalette(inputGroupEl-borderColor);
  color: brandPalette(inputGroupEl-color);
  display: flex;
  font-size: rem(fontSizes(inputGroupElem));
  font-weight: fontWeight(inputGroupElem);
  line-height: rem(lineHeight(input));
  min-height: rem(calc(lineHeight(input) + 2));
  padding: 0 rem(brandSizes(formControl_paddingX));
  margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
  // line-height: $input-line-height;
  text-align: center;
  white-space: nowrap;
  // @include border-radius($input-border-radius);

  // Nuke default margins from checkboxes and radios to vertically center within.
  input[type="radio"],
  input[type="checkbox"] {
    margin-top: 0;
  }
  .svg--icon{
    svg{
      height: var(--svgIcon_height, 16px);
      width: var(--svgIcon_height, 16px);
    }
  }
}

.inputGroup_prepend>.btn,
.inputGroup_prepend>.inputGroup_text,
.inputGroup_append:last-child>.btn:not(:last-child):not(.dropdown-toggle),
.inputGroup_append:last-child>.inputGroup_text:not(:last-child) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.inputGroup_append>.btn,
.inputGroup_append>.inputGroup_text,
.inputGroup_prepend:not(:first-child)>.btn,
.inputGroup_prepend:not(:first-child)>.inputGroup_text,
.inputGroup_prepend:first-child>.btn:not(:first-child),
.inputGroup_prepend:first-child>.inputGroup_text:not(:first-child) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}